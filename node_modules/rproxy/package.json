{
  "name": "rproxy",
  "description": "A reverse proxy for RESTful services.",
  "version": "0.3.1",
  "author": {
    "name": "Tomaz Muraus",
    "email": "tomaz+npm@tomaz.me"
  },
  "keywords": [
    "proxy",
    "http proxy",
    "reverse proxy"
  ],
  "homepage": "https://github.com/racker/node-rproxy",
  "repository": {
    "type": "git",
    "url": "git://github.com/racker/node-rproxy.git"
  },
  "directories": {
    "lib": "./lib",
    "example": "./example",
    "bin": "./bin"
  },
  "dependencies": {
    "async": "= 0.1.22",
    "sprintf": "= 0.1.1",
    "logmagic": "= 0.1.4",
    "http-proxy": "= 0.8.4",
    "optimist": "= 0.3.1",
    "elementtree": "0.1.1",
    "node-uuid": "1.3.3",
    "cluster2": "0.3.6",
    "keystone-client": "0.3.0",
    "rackspace-shared-utils": ">= 0.1.20",
    "redis": "= 0.7.1",
    "cassandra-client": ">= 0.14.x",
    "tryfer": "git+https://github.com/racker/node-tryfer.git"
  },
  "optionalDependencies": {
    "redis": "= 0.7.1",
    "cassandra-client": ">= 0.14.x",
    "tryfer": "git+https://github.com/racker/node-tryfer.git"
  },
  "devDependencies": {
    "hiredis": "0.1.14",
    "whiskey": "0.6.9",
    "jshint": "0.5.9",
    "node-dev": "0.2.2",
    "express": "2.5.9"
  },
  "engines": {
    "node": ">= 0.8.0 && < 0.9.0"
  },
  "main": "./index",
  "bin": {
    "rproxy": "./bin/server"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "scripts": {
    "lint": "./scripts/lint.sh",
    "test": "./scripts/tests.sh",
    "run-dev": "./scripts/run-dev.sh",
    "benchmark-env": "NODE_PATH=lib node_modules/whiskey/bin/whiskey-process-runner --config tests/dependencies-benchmark.json --run"
  },
  "readme": "## node-rproxy\n\nA reverse proxy for RESTful services.\n\n# Features\n\n* Authentication via the Keystone API\n* Flexible rate limiting based on the source IP address\n* Supported database backends\n  * Redis\n  * Cassandra\n\n# Concepts\n\n![](http://img38.imageshack.us/img38/2060/noderproxy1.png)\n\n## Middleware\n\nMiddleware is a node module which exposes a single method and acts on a request\nor a response. There are two types of middleware:\n\n* request middleware - This type of middleware acts on a request before it's proxied to\n  the backend server. It can for example talk to a remote authentication server\n  or implement rate limiting.\n* response middleware - This type of middleware acts on a response returned by\n  the backend before the responses is returned back to the user. It can for\n  example strip or inject extra headers in the response.\n\nNote: Currently response middleware is only limited to modifying the response\nheaders.\n\n# Requirements\n\n- Node.js\n- Redis or Cassandra (for caching auth tokens and storing rate limit values)\n\n# Configuration\n\nConfiguration is stored in a JSON format in a file. Example configuration can\nbe found in `example/config.json`.\n\n## Reverse proxy configuration (\"server\" attribute)\n\n* `host` - listen address for the reverse proxy server\n* `port` - listen port for the reverse proxy server\n* `workers` - number of workers processes to use. Defaults to the number of\n  available CPUs.\n\n## Admin API configuration (\"admin_api\" attribute)\n\n* `host` - listen address for the admin API server\n* `port` - listen port for the admin API server\n* `key` - API key used for authentication which must be provided in the\n  `x-api-key` header.\n\n# Backend a.k.a. proxy target configuration (\"target\" attribute)\n\n* `host` - listen address for the proxy target\n* `port` - listen port for the proxy target\n* `middleware_run_list` - an object with two keys:\n  * `request` - an array of middleware to run for every request\n  * `response` - an array of middleware to run for every response\n\n# Special headers which are added to every request\n\nA list of special headers which are added to every request by rproxy before\nproxying it to the backend server.\n\n* `X-RP-Request-Id` - Unique ID associated with a request. This ID can be used\nto map and track the request between rproxy and the backend server.\n\nThis ID can be used to track and map requests between rproxy and backend server even when tracing middleware is not used.\n\n# Middleware configuration options\n\n## Identity provider\n\nThis middleware parses a user tenant id from the URL or a header called `X-Tenant-Id`\nand puts it on the request object.\n\n### Settings\n\n* `tenant_id_regex` - regular expression which is used for parsing tenant id\n  from the request URL. If not provided it defaults to `/\\/(\\d+)\\/?/`.\n\n## Authentication\n\nThis middleware authenticates a user against the [Keystone\nAPI](http://docs.openstack.org/incubation/identity-dev-guide/content/Overview-Keystone-API-d1e62.html).\nIt expects authentication token to be provided in the header with the name\n`X-Auth-Token` or in the query string with the name `x-auth-token`.\n\nUnless `?skip-auth-cache` query string is provided, token is stored in the cache\nuntil it expires.\n\n### Settings\n\n* `username` - admin username for the Keystone auth server\n* `password` - admin password for the Keystone auth server\n* `urls` - an array of Kesystone API URLs to hit in parallel when\nauthenticating a user. Authentication is be considered as successful if at\nleast one URL returns a success. By default this array contains URL for US and\nUK Keystone server.\n* `whitelist` - A list of paths which don't require authentication\n\n### Error codes\n\n* `NR-1000` - missing `X-Tenant-Id` header\n* `NR-1001` - missing `X-Auth-Token` header\n* `NR-1002` - invalid or expired auth token\n* `NR-5000` - something unexpected has happened\n\n## Rate limiting\n\nThis middleware provides flexible rate limiting based on the requested paths.\n\n### Settings\n\n* `bucket_size` - Size of a bucket in seconds. This value also specifies a\n  minimum time period you can rate limit on.\n* `limits` - An array of limit objects. Each object has the following keys:\n  * `method` - HTTP method of the limited path\n  * `path_regex` - Regular expression for the rate limited path\n  * `limit` - Request limit for this path\n  * `period` - Period in seconds. This value can't be smaller than\n  `bucket_size`\n* `view_path` - Special path which, when hit will sent current user limits to the\n  backend using a POST request\n* `view_backend_path` - Path on the backend where the users limits are sent to\n  when user hits `view_path` on the proxy.\n\n### Error codes\n\n* `NR-2000` - rate limit has been reached\n\n## Usage\n\nThis middleware intercepts special usage headers returned by the backend and\nsends usage events to an [Atom Hopper](http://atomhopper.org/) instance.\n\n### Settings\n\n* `url` - Atom Hopper instance URL\n* `service_name` - Name of the service\n* `region` - Service region or `global`\n* `datacenter` - Service datacenter or `global`\n\n### Header remover\n\nThis middleware removes headers with the specified prefix from the response.\n\n## Special header names\n\n* X-RP-Error-Code\n* X-RP-Error-Message\n\n## Tracing\n\nThis middleware integrated wits Zipkin distributed tracing. It supports\nsubmitting traces to a remote RESTkin endpoint.\n\nFor more information about tracing, please have a look at the Node tracing\nclient called [https://github.com/racker/node-tryfer](node-tryfer).\n\nNote: This middleware is special, because if enabled, it integrates with other\nmiddleware such as authentication and rate limiting.\n\n### Settings\n\n* `service_name_prefix` - Prefix which is prepended in front of the service name\n* `ignored_headers` - A list of request header names which are stripped from the\n from the request header object which is stored as an annotation on the trace \n object.\n* `authentication.url` - URL to the Keystone authentication endpoint which is used\n to obtain the token which is then used to authenticate against the RESTkin API.\n* `authentication.username` - API username.\n* `authentication.apiKey` - API key.\n* `restkin.url` - URL to the RESTkin HTTP endpoint\n\n### Other\n\nThis middleware propagates parent trace ID in the request header called\n`x-b3-traceid` to the backend server.\n\nThis ID can be used by the backend server to attach other child traces to it.\n\n# Running lint and tests\n\nBy default tests are automatically run on every commit on [Travis-ci](http://travis-ci.org).\nYou can view the build status at [http://travis-ci.org/#!/racker/node-rproxy](http://travis-ci.org/#!/racker/node-rproxy).\n\nIf you want to run them locally you need to have either Redis or Cassandra (or\nboth) installed.\n\n## Running lint\n\n`npm run-script lint`\n\n## Running tests with Redis backend\n\n`DB_BACKEND=redis REDIS_HOME=<path to the directory containg redis-server binary> npm run-script test`\n\n## Running tests with Cassandra backend\n\n`DB_BACKEND=cassandra CASSANDRA_HOME=<path to the directory containg cassandra binary> CASSANDRA_CONF=<path to cassandra configuration> npm run-script test`\n\nSample configurations for Cassandra 1.1 and 1.2 are kept in `tests/conf/cass-1.1` and `tests/cass/cass-1.2`.\nYou are welcome to use them during development, or you can specify your own configuration.\nBy default, Travis-CI runs all tests against Cassandra 1.1.\n\n# TODO\n\n- Performance optimizations\n- Log middleware\n- Integration guide\n",
  "readmeFilename": "README.md",
  "_id": "rproxy@0.3.1",
  "dist": {
    "shasum": "7da13bbbdec6411e715a1dc747dd20e42d1d7c52"
  },
  "_resolved": "git+https://github.com/racker/node-rproxy.git#7fe4f8c808c27cc8a1bea2c25e1878ad15513057",
  "_from": "rproxy@git+https://github.com/racker/node-rproxy.git"
}
