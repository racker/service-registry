/**
 *  Copyright 2012 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var path = require('path');

var misc = require('rackspace-shared-utils/lib/misc');
var cassLog = require('logmagic').local('ele.cassandra');
var cassErrorLog = require('logmagic').local('ele.cassandra-error');
var cassCqlLog = require('logmagic').local('ele.cassandra-cql');
var cassTimeLog = require('logmagic').local('ele.cassandra-timing');

var initialize = require('../lib/init').initialize;

var cutils = require('../lib/orm/utils');

function logEvent(level, message, obj) {
  obj = obj || {};

  if (level === 'error') {
    if (obj.connectionInfo) {
      obj.cass_host = obj.connectionInfo.host;
      obj.cass_port = obj.connectionInfo.port;
    }

    cassErrorLog.error(message, obj);
  } else if (level === 'info') {
    cassLog.info(message, obj);
  } else if (level === 'warn') {
    cassLog.warn(message, obj);
  } else if (level === 'cql') {
    cassCqlLog.info('CQL QUERY: ' + obj.parameterized_query, cutils.rightLogObject(obj));
  }
  else if (level === 'timing') {
    cassTimeLog.trace('CQL TIMING', cutils.rightLogObject(obj));
  }
  else if (level === 'trace') {
    cassLog.trace(message, obj);
  }
  else {
    cassLog.debug(message, obj);
  }
}

exports.init = function(options, callback) {
  options = options || {};
  var defaultOptions = {};

  defaultOptions.hosts = ['127.0.0.1:9160'];
  defaultOptions.keyspace = 'cassandra_orm';
  defaultOptions.modelsPath = path.join(__dirname, '../examples/models');
  defaultOptions.migrationsPath = path.join(__dirname, '../examples/migrations');
  defaultOptions.accountingCf = 'accounting';
  defaultOptions.trackedModels = ['accounts', 'entities'];
  defaultOptions.readConsistency = 'ONE';
  defaultOptions.writeConsistency = 'ONE';
  defaultOptions.indexCleanupWhitelist = ['accounts'];
  options.logFunc = logEvent;

  options = misc.merge(defaultOptions, options);
  initialize(options, callback);
};

exports.setUp = function(test, assert) {
  exports.init(null, test.finish);
};

exports.tearDown = function(test, assert) {
  exports.shutdown(test.finish);
};

exports.shutdown = function(callback) {
  cutils.shutdown(callback);
};
