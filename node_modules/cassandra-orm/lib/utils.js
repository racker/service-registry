/**
 *  Copyright 2012 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var logmagic = require('logmagic');
var terminal = require('terminal');

var levelArray = [], key;

for (key in logmagic) {
  if (key[0] === key[0].toUpperCase()) {
    levelArray[logmagic[key]] = key;
  }
}

exports.getMessageForLevel = function(level) {
  if (level > 6) {
    return levelArray[level];
  }
  else if (level > 5) {
    return "[green]" + levelArray[level] + "[/green]";
  }
  else if (level > 3) {
    return "[yellow]" + levelArray[level] + "[/yellow]";
  }
  else if (level > 1) {
    return "[red]" + levelArray[level] + "[/red]";
  }
  return levelArray[level];
};

/**
 * Create a sink which stylizes the message and prints it to stdout,
 */
exports.buildSink = function buildSink(includeDate, includeColors) {
  includeDate = includeDate || false;

  if (includeColors === undefined) {
    includeColors = true;
  }

  return function(modulename, level, message, obj) {
    if (obj) {
      var k, i = 0, date, extra = '[grey]', prefix, levelMsg;
      date = (includeDate) ? '[cyan]' + new Date().toString() + '[/cyan] ' : '';
      prefix = date + '[green]' + modulename + '[/green] ';
      for (k in obj) {
        if (['error'].indexOf(k) !== -1) {
          if (i > 0) {
            extra += ',';
          }
          extra += k + '=' + obj[k];
          i++;
        }
      }
      extra += '[/grey]';

      levelMsg = exports.getMessageForLevel(level);

      if (includeColors) {
        console.log(terminal.stylize(prefix + '[' + levelMsg + ']: ' + message + ' ' + extra));
      }
      else {
        console.log(terminal.stripStyles(prefix + '[' + levelMsg + ']: ' + message + ' ' + extra));
      }
    }
    else {
      console.log(modulename + ': ' + message);
    }
  };
};
