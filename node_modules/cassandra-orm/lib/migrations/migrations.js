/**
 *  Copyright 2012 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var path = require('path');

var Set = require('simplesets').Set;
var sprintf = require('sprintf').sprintf;
var async = require('async');

var misc = require('rackspace-shared-utils/lib/misc');
var templates = require('magic-templates');

var migrationConstants = require('./constants');



/**
 * Field operation.
 * @constructor
 *
 * @param {String} name Field name.
 * @param {Object} options Field options.
 * @param {String} action Field migration action: 'add', 'remove' or
 * 'change_options'.
 *
 */
function FieldOperation(name, options, action) {
  this.name = name;
  this.options = options;
  this.action = action;
}


/**
 * String representation.
 *
 * @return {String} String representation.
 */
FieldOperation.prototype.toString = function() {
  var str;

  if (this.action === 'add') {
    str = sprintf('+ %s', this.name);
  }
  else if (this.action === 'remove') {
    str = sprintf('- %s', this.name);
  }
  else if (this.action === 'change_options') {
    str = sprintf('$ %s', this.name);
  }

  return str;
};


/**
 * Inspect 'field' attribute on two models and find differences between them.
 *
 * @param {Object} fields1 Fields on the previous version.
 * @param {Object} fields2 Fields on the current version.
 * @return {Array.FieldOperation} Array of operations which need to be performed
 * to come from model1 to model2.
 */
exports.getModelsFieldsDiff = function getModelsFieldsDiff(fields1, fields2) {
  var setFields1 = new Set(Object.keys(fields1)),
      setFields2 = new Set(Object.keys(fields2)),
      allFields = setFields1.union(setFields2).array(),
      addedFields = setFields2.difference(setFields1).array(),
      removedFields = setFields1.difference(setFields2).array(),
      result = {
        'add': [],
        'remove': [],
        'change_options': []
      };

  // Build operation list
  allFields.forEach(function(key) {
    if (fields2.hasOwnProperty(key) && addedFields.indexOf(key) !== -1) {
      result.add.push(new FieldOperation(key, fields2[key], 'add'));
    }
    else if (fields1.hasOwnProperty(key) && removedFields.indexOf(key) !== -1) {
      result.remove.push(new FieldOperation(key, fields1[key], 'remove'));
    }
    else if (fields1.hasOwnProperty(key) && fields2.hasOwnProperty(key)) {
      if (!(misc.deepEqual(fields1[key], fields2[key]))) {
        result.change_options.push(new FieldOperation(key, fields2[key], 'change_options'));
      }
    }
  });

  return result;
};


/**
 * Inspect the model source source and find the 'field' attribute and return a
 * string representation of it.
 *
 * @param {Object} model Model object.
 * @return {String} String representation of the fields attribute.
 */
exports.getFieldsDefinitionString = function getFieldsDefinitionString(model) {
  return JSON.stringify(model.fields, null, 2);
};


/**
 * Return a migration file stub.
 *
 * @param {Object} model Model object.
 * @param {Number} version Migration version.
 * @param {Function} callback Callback called with (err, {String}migrationFileStub).
 */
exports.getMigrationFileStub = function getMigrationFileStub(model, version, callback) {
  var template = new templates.Template(path.join(__dirname, './template.magic')), context;

  context = {
    'framework_version': migrationConstants.VERSION,
    'timestamp': misc.getUnixTimestamp(),
    'migration_version': version,
    'fields': exports.getFieldsDefinitionString(model)
  };

  async.waterfall([
    template.load.bind(template),

    template.render.bind(template, context, function(err, output) {
      if (err) {
        callback(err);
        return;
      }

      callback(null, output.join(''));
    })
  ], callback);
};


/** FieldOperation class. */
exports.FieldOperation = FieldOperation;
