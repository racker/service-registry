var base = require('../../lib/orm/base');
var utils = require('../../lib/orm/utils');



/**
 * Object representing a BoundCheck.
 * @constructor
 * @param {Object} attributes Attributes to set in the resulting object.
 */
var BoundCheck = function(attributes) {
  BoundCheck.super_.call(this, BoundCheck, attributes);
};


/**
 * Add properties that help map to cassandra
 * complex types
 */
BoundCheck.meta = {
  name: 'BoundCheck',
  cname: 'bound_checks',
  columnFamily: 'objects',
  prefix: 'bc',
  parents: ['entity_id', 'check_id'],
  indexes: {
    'collector_idx': utils.addIndex({ key: ['collector_id'],
      name: ['$ROWKEY', 'entity_id', 'check_id', '$OBJKEY'], object: 'BoundCheck',
      columnFamily: 'collector_bound_check_idx',
      relationship: 'OneToMany'})
  }
};


/**
 * Fields on the BoundCheck
 */
BoundCheck.fields = {
  'entity_id': null,
  'check_id': null,
  'collector_id': null
};


/**
 * Version of the model which is written to the database.
 */
BoundCheck.operationalVersion = 0;


/**
 * TODO: make this more friendly to developers.
 * Right now this _HAS_ to be after you declare the Meta field.
 */
base.inheritBase(BoundCheck, __filename);


/**
 * BoundCheck object.
 */
exports.BoundCheck = BoundCheck;
