#!/usr/bin/env node
/**
 *  Copyright 2012 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var stdin = process.openStdin();
var stdout = process.stdout;
var tty = require('tty');

var terminal = require('terminal');
var sprintf = require('sprintf').sprintf;
var logmagic = require('logmagic');

var levelArray = [];

for (k in logmagic) {
  if (k[0] == k[0].toUpperCase()) {
    levelArray[logmagic[k]] = k;
  }
}

var lg = function() {
  var result = sprintf.apply(null, arguments);
  result = terminal.stylize(result);
  stdout.write(result);
};

var buffer = '';


function writeWithNewline(line) {
  stdout.write(line);
  if (line[line.length - 1] !== '\n') {
    stdout.write('\n');
  }
}

function getLevel(lvl) {
  lvl = parseInt(lvl, 10)

  if (lvl < 4) {
    return sprintf('[red]%s[/red]', levelArray[lvl]);
  } else if (lvl < 6) {
    return sprintf('[yellow]%s[/yellow]', levelArray[lvl]);
  } else if (lvl < 8) {
    return sprintf('[green]%s[/green]', levelArray[lvl]);
  }
  return lvl;
}

function writeWithIndent(indent, msg) {
  var i, x = msg.split("\n"), buf = new Array(indent + 1).join(' ');

  for (i = 0; i < x.length; i++) {
    stdout.write(buf + x[i] + "\n");
  }
}

function processLine(payload) {
  var k, k1,
      extra = [];


  lg('[green]%s[/green] [%s] [[yellow]%s[/yellow]] ', new Date(payload.timestamp * 1000), getLevel(payload.level), payload.facility);

  if (extra.length) {
    lg('[grey]' + extra.join(',') + '[/grey] ');
  }

  if (payload.full_message) {
    if (payload.full_message.indexOf(payload.short_message) > -1) {
      writeWithNewline(payload.full_message);
    } else {
      writeWithNewline(payload.short_message);
      writeWithIndent(4, payload.full_message);
    }
  } else {
    writeWithNewline(payload.short_message);
  }

  if (payload._err) {
    if (payload._err.stack) {
      writeWithIndent(4, payload._err.stack);
    } else if (payload._err.message) {
      writeWithIndent(4, payload._err.message);
    } else {
      writeWithIndent(4, JSON.stringify(payload._err));
    }
  }

  if (payload._payload) {
    writeWithIndent(4, payload._payload);
  }
}

stdin.on('data', function(chunk) {
  buffer += chunk;

  while ((i = buffer.indexOf('\n')) >= 0) {
    var json = buffer.slice(0, i);
    var m = null;
    buffer = buffer.slice(i + 1);
    if (json && json[0] !== '{') {
      writeWithIndent(4, json);
      continue;
    }

    try {
      console.log(json)
      m = JSON.parse(json);
    }
    catch (err) {
      console.log(err.stack);
      console.log('Failed to parse', json);
    }

    if (m) {
      try {
        processLine(m);
      }
      catch (err) {
        console.error(err.stack);
        console.error(m);
      }
    }
  }
});
