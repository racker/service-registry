var fs = require('fs');
var Histogram = require('../metrics/histogram');
var EWMA = require('../stats/exponentially_weighted_moving_average');
var Timer = require('../metrics/timer');

//var minute1 = new EWMA(1 - Math.exp(-25));
var minute1 = new EWMA(1 - Math.exp(-0.01));
var minute5 = new EWMA(1 - Math.exp(-0.0028));
var minute15 = new EWMA(1 - Math.exp(-0.001));
var minute60 = new EWMA(1 - Math.exp(-0.0003));



minute1.interval = 100;
minute5.interval = 100;
minute15.interval = 100;
minute60.interval = 100;

function test(meter) {
  function tick(num) {
    num = num || 1;
    for (var i = 0; i < num; i++) {
      meter.tick();
    }
  }
  var runMins = 500;
  var ticksPerMinute = 60000 / meter.interval;
  var ops = runMins * ticksPerMinute;
  var opsPerMinute = ops / runMins;
  var desiredPerMinute = 1000;
  
  for (var i = 0; i < ops; i++) {
    meter.update(desiredPerMinute / opsPerMinute);
    tick(1);
  }
  
  console.log('after 500 minutes of 1000 ops/minute: ' + meter.rate());
  tick(1);
  console.log('after 100ms of nothing:' + meter.rate());
  tick(1);
  console.log('after 200ms of nothing:' + meter.rate());
  tick(8);
  console.log('after 1s of nothing:' + meter.rate());
  tick(10);
  console.log('after 2s of nothing:' + meter.rate());
  tick(80);
  console.log('after 10s of nothing:' + meter.rate());
  tick(500);
  console.log('after 1m of nothing:' + meter.rate());
  tick(600);
  console.log('after 2m of nothing:' + meter.rate());
  tick(600);
  console.log('after 3m of nothing:' + meter.rate());
  tick(4200);
  console.log('after 10m of nothing:' + meter.rate());
  tick(3000);
  console.log('after 15m of nothing:' + meter.rate());
  
  // 1 sec spike.
  for (var i = 0; i < 10; i++) {
    meter.update(desiredPerMinute / opsPerMinute);
    tick(1);
  }
  console.log('after a 1s spike: ' + meter.rate());
  
  for (var i = 0; i < 90; i++) {
    meter.update(desiredPerMinute / opsPerMinute);
    tick(1);
  }
  console.log('after a 10s spike: ' + meter.rate());
  
  // 1 m
  for (var i = 0; i < 500; i++) {
    meter.update(desiredPerMinute / opsPerMinute);
    tick(1);
  }
  console.log('after a 1m spike: ' + meter.rate());
}

//test(minute60);

//function dumpHist(hist) {
//  console.log(hist.percentiles());
//  console.log("mean: " + hist.mean());
//  console.log("variance: " + hist.variance());
//  console.log("stdDev: " + hist.stdDev());
//  console.log("");
//}
//
//var edsHist = Histogram.createExponentialDecayHistogram(5)
//    , unifHist = Histogram.createUniformHistogram(5);
//
//var updatesPerSecond = 10;
//var timeLength = 60; // seconds.
//var count = 0;
//var x;
//
//var update = function() {
//  edsHist.update(parseInt(fs.readFileSync('/Users/gary.dusbabek/Desktop/rate.txt')));
//  unifHist.update(parseInt(fs.readFileSync('/Users/gary.dusbabek/Desktop/rate.txt')));
//  dumpHist(edsHist);
//  dumpHist(unifHist);
//  
//  
//  count += 1;
//  if (count >= updatesPerSecond * timeLength) {
//    clearInterval(x);
//  }
//};
//
//
//x = setInterval(update, 1000 / updatesPerSecond);;


function dump(tmr) {
  console.log('count   ' + tmr.count());
  console.log('min     ' + tmr.min());
  console.log('max     ' + tmr.max());
  console.log('mean    ' + tmr.mean());
  console.log('stddev  ' + tmr.stdDev());
  console.log('1mrt    ' + tmr.oneMinuteRate());
  console.log('5mrt    ' + tmr.fiveMinuteRate());
  console.log('15mrt   ' + tmr.fifteenMinuteRate());
  console.log('mnrt    ' + tmr.meanRate());
  console.log(tmr.percentiles());
  console.log('');
}

var timer = new Timer();
var waitMs = 10;

function update() {
  var str = (''+fs.readFileSync('/Users/gary.dusbabek/Desktop/rate.txt')).split(',');
  var count = parseInt(str[0]);
  timer.update(count);
  var newWaitMs = 1000/parseInt(str[1]);
  if (newWaitMs != waitMs) {
    console.log('wait going from ' + waitMs + ' to ' + newWaitMs);
    waitMs = newWaitMs
    clearInterval(updateInterval);
    updateInterval = setInterval(update, waitMs);
  }
}
var updateInterval = setInterval(update, 10);
var dumpInterval = setInterval(function() {
  dump(timer);
}, 1000);



/*

Here is how you push to the repo:

        */